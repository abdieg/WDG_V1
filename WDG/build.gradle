def properties = new Properties()
file("src/test/resources/system.properties").withInputStream { properties.load(it) }

apply plugin: 'java'
apply plugin: 'eclipse'

delete 'ScreenShots'
new File("ScreenShots").mkdir()

sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
	testCompile 'org.seleniumhq.selenium:selenium-java:2.47.1'
	testCompile 'org.testng:testng:6.8'
	testCompile 'org.slf4j:slf4j-simple:1.7.5'
	
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    //Dependencies for Maria DB
    compile ('org.mariadb.jdbc:mariadb-java-client:1.2.2') {
        exclude group: 'net.java.dev.jna'
    }
    compile 'net.java.dev.jna:jna:4.1.0'
    compile 'net.java.dev.jna:jna-platform:4.1.0'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

test {
	systemProperties = properties
	
	println "--CHECKING GRADLE!"
	println "--URL: " + systemProperties['app-host']
	println "--MACHINE: " + systemProperties['selenium-host']
	println "--PORT: " + systemProperties['selenium-port']
	println "--DBDRIVER: " + systemProperties['db-driver']
	println "--DBURL: " + systemProperties['db-url']
	println "--DBUSER: " + systemProperties['db-user']
	println "--DBPASS: " + systemProperties['db-password']
	
	//Example: gradle clean build -Dnav=chrome
	def nav = System.getProperty('nav')
	if (nav == null) {
		nav = "firefox"
	}
	systemProperty "browser", nav
	println "--BROWSER: " + nav

    useTestNG {
    	//Example: gradle clean build -Donly=TestSomething
		def only = System.getProperty('only')
        
        if (only) {
			println "--RUNNING TEST INDIVIDUALLY!"
			
			def suite1 = new XmlParser().parse(new File('src/test/resources/testng/suite1.xml'))
			suite1.children().findAll{ it.@name != only }.each{ suite1.remove(it) }
			
			def suite2 = new XmlParser().parse(new File('src/test/resources/testng/suite2.xml'))
			suite2.children().findAll{ it.@name != only }.each{ suite2.remove(it) }
			
			if (!suite1.children().isEmpty()) {
				new File('src/test/resources/testng/temp.xml').withPrintWriter { new XmlNodePrinter(it).print(suite1) }
				suites 'src/test/resources/testng/temp.xml'
			} 
			else if (!suite2.children().isEmpty()) {
				new File('src/test/resources/testng/temp.xml').withPrintWriter { new XmlNodePrinter(it).print(suite2) }
				suites 'src/test/resources/testng/temp.xml'					
			}
		}
		else {
			println "--RUNNING ALL SUITES!"
			//-------------------------------------All Tests------------------------------------
			suites 'src/test/resources/testng/testng.xml'
			//----------------------------------------------------------------------------------
		}
    }
    
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
    
    options {
    	listeners << 'org.webdriver.common.ScreenshotListener'
    }
    
    reports {
		html.enabled = true
	}
	
}
